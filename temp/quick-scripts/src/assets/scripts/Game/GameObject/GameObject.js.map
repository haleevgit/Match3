{"version":3,"sources":["assets/scripts/Game/GameObject/GameObject.js"],"names":["cc","Class","Component","properties","activated","tooltip","notify","old","_isNeedToPool","world","deleteGameObject","pooler","node","getComponent","pg","PoolerHelper","returnToPool","order","RenderListType","Default","type","visible","serializable","get","_type","id","GameObjectType","None","_render","editor","menu","onLoad","_init","_initBody","_initRender","specify","revive","kill","screenIntersection","camera","Camera","findCamera","screenRect","Rect","settings","GAME_WIDTH","GAME_HEIGHT","globalBoundingBox","getBoundingBoxToWorld","worldToScreenMat","Mat4","getWorldToScreenMatrix2D","screenBoundingBox","transformMat4","interRect","intersection","isIntersectScreen","width","height"],"mappings":"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","sourceRoot":"/","sourcesContent":["import GameEvent from 'GameEvent';\n\nimport GameObjectType from 'GameObjectType';\nimport RenderListType from 'RenderListType';\n//#region classes-helpers\n//#endregion\n\ncc.Class({\n    extends: cc.Component,\n\n    properties: {\n        //#region editors fields and properties\n        activated: {\n            default: false,\n            tooltip: 'переключатель, при изменении статуса запускает все необходимые методы',\n            notify(old) {\n                if (this.activated !== old) {\n                    this._isNeedToPool = !this.activated;\n\n                    if (this._isNeedToPool) {\n                        if (this.world) {\n                            this.world.deleteGameObject(this);\n                        }\n\n                        const pooler = this.node.getComponent(pg.PoolerHelper);\n                        if (pooler) {\n                            pooler.returnToPool();\n                        }\n                    }\n                }\n            },\n        },\n        order: {\n            default: RenderListType.Default,\n            type: RenderListType,\n            tooltip: 'глубина отрисовки объекта, по RenderListType',\n        },\n        //#endregion\n\n        //#region public fields and properties\n        world: { default: null, visible: false, serializable: false },\n        type: {\n            get() {\n                return this._type;\n            },\n            visible: false,\n        },\n        id: { default: -1, visible: false, serializable: false },\n        //#endregion\n\n        //#region private fields and properties\n        _type: {\n            default: GameObjectType.None,\n            type: GameObjectType,\n            serializable: false,\n        },\n\n        _isNeedToPool: { default: false, serializable: false },\n\n        _render: { default: null, serializable: false },\n        //#endregion\n    },\n\n    editor: {\n        menu: 'GameObject/GameObject',\n    },\n\n    //#region life-cycle callbacks\n    onLoad() {\n        this._init();\n        this._initBody();\n        this._initRender();\n    },\n    //#endregion\n\n    //#region public methods\n    // устанавливаем доп параметры объекта до добавления на сцену\n    specify: null,\n\n    // в этой функции приводим параметры к значениям для активного объекта\n    revive() {\n        this.activated = true;\n    },\n\n    // приводим параметры к значениям для \"убитого\" объекта\n    kill() {\n        this.activated = false;\n    },\n\n    screenIntersection() {\n        const camera = cc.Camera.findCamera(this.node);\n        const screenRect = new cc.Rect(0, 0, pg.settings.GAME_WIDTH, pg.settings.GAME_HEIGHT);\n\n        const globalBoundingBox = this.node.getBoundingBoxToWorld();\n        const worldToScreenMat = new cc.Mat4();\n        camera.getWorldToScreenMatrix2D(worldToScreenMat);\n\n        let screenBoundingBox = new cc.Rect();\n        globalBoundingBox.transformMat4(screenBoundingBox, worldToScreenMat);\n\n        const interRect = new cc.Rect();\n        screenRect.intersection(interRect, screenBoundingBox);\n\n        return interRect;\n    },\n\n    isIntersectScreen() {\n        const intersection = this.screenIntersection();\n\n        return intersection.width > 0 && intersection.height > 0;\n    },\n    //#endregion\n\n    //#region private methods\n    _init() {},\n    _initBody() {},\n    _initRender() {},\n    //#endregion\n\n    //#region event handlers\n    //#endregion\n});\n"]}