{"version":3,"sources":["assets/scripts/Game/Ui/UiManager.js"],"names":["cc","Class","Component","properties","PREVIEW","editorOnly","tooltip","screenType","UiScreenType","None","type","notify","old","_convertScreenType","indexOf","push","_prefabs","prefab","oldIndex","oldPrefab","splice","serializable","Prefab","visible","convertScreenType","get","prefabs","_screens","onEnable","i","length","_handleSubscription","onDisable","isOn","func","systemEvent","GameEvent","TOGGLE_SCREEN","onToggleScreen","screenIndex","screen","instantiate","parent","node","getComponent","IScreen","activated","show","hide"],"mappings":"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","sourceRoot":"/","sourcesContent":["import GameEvent from 'GameEvent';\nimport UiScreenType from 'UiScreenType';\nimport IScreen from 'IScreen';\n//#region classes-helpers\n//#endregion\n\ncc.Class({\n    extends: cc.Component,\n\n    properties: {\n        //#region editors fields and properties\n        PREVIEW: {\n            default: false,\n            editorOnly: true,\n            tooltip: 'показать все типы экранов и префабы к ним',\n        },\n\n        screenType: {\n            default: UiScreenType.None,\n            type: UiScreenType,\n            notify(old) {\n                if (this.screenType !== UiScreenType.None) {\n                    if (this._convertScreenType.indexOf(this.screenType) === -1) {\n                        this._convertScreenType.push(this.screenType);\n                        this._prefabs.push(null);\n                    }\n\n                    this.prefab = this._prefabs[this._convertScreenType.indexOf(this.screenType)];\n\n                    const oldIndex = this._convertScreenType.indexOf(old);\n\n                    if (oldIndex > -1) {\n                        const oldPrefab = this._prefabs[oldIndex];\n\n                        if (oldPrefab === null) {\n                            this._prefabs.splice(oldIndex, 1);\n                            this._convertScreenType.splice(oldIndex, 1);\n                        }\n                    }\n                }\n            },\n            serializable: false,\n            tooltip: 'тип экрана для привязки префаба',\n        },\n\n        prefab: {\n            default: null,\n            type: cc.Prefab,\n            notify() {\n                if (this.screenType !== UiScreenType.None && (this.prefab instanceof cc.Prefab || this.prefab === null)) {\n                    this._prefabs[this._convertScreenType.indexOf(this.screenType)] = this.prefab;\n                }\n            },\n            visible() {\n                return this.screenType !== UiScreenType.None;\n            },\n            serializable: false,\n            tooltip: 'префаб для экрана',\n        },\n\n        convertScreenType: {\n            get() {\n                return this._convertScreenType;\n            },\n            type: [UiScreenType],\n            visible() {\n                return this.PREVIEW;\n            },\n        },\n\n        prefabs: {\n            get() {\n                return this._prefabs;\n            },\n            type: [cc.Prefab],\n            visible() {\n                return this.PREVIEW;\n            },\n        },\n        //#endregion\n\n        //#region public fields and properties\n        //#endregion\n\n        //#region private fields and properties\n        _screens: { default: null, serializable: false },\n        _prefabs: { default: [], type: [cc.Prefab] },\n        _convertScreenType: { default: [], type: [UiScreenType] },\n        //#endregion\n    },\n\n    //#region life-cycle callbacks\n    onEnable() {\n        this._screens = {};\n        for (let i = 0; i < this._convertScreenType.length; i++) {\n            const type = this._convertScreenType[i];\n            this._screens[type] = null;\n        }\n\n        this._handleSubscription(true);\n    },\n\n    onDisable() {\n        this._handleSubscription(false);\n    },\n    //#endregion\n\n    //#region public methods\n    //#endregion\n\n    //#region private methods\n    _handleSubscription(isOn) {\n        const func = isOn ? 'on' : 'off';\n\n        cc.systemEvent[func](GameEvent.TOGGLE_SCREEN, this.onToggleScreen, this);\n    },\n    //#endregion\n\n    //#region event handlers\n    onToggleScreen(screenType, isOn) {\n        const screenIndex = this._convertScreenType.indexOf(screenType);\n        let screen;\n\n        if (screenIndex < 0 || !this._prefabs[screenIndex]) {\n            return;\n        }\n\n        if (!this._screens[screenType]) {\n            const prefab = this._prefabs[screenIndex];\n            screen = cc.instantiate(prefab);\n            screen.parent = this.node;\n\n            this._screens[screenType] = screen;\n        } else {\n            screen = this._screens[screenType];\n        }\n\n        if (isOn && !screen.getComponent(IScreen).activated) {\n            screen.getComponent(IScreen).show();\n        } else if (!isOn && screen.getComponent(IScreen).activated) {\n            screen.getComponent(IScreen).hide();\n        }\n    },\n    //#endregion\n});\n"]}