{"version":3,"sources":["assets/scripts/Game/Ui/Screen/ScreenManager.js"],"names":["ScreenShowSettings","cc","Class","name","properties","type","UiScreenType","None","tooltip","zIndex","activateOnStart","disableOnShow","Component","screenSettings","notify","oldValue","array","forEach","el","find","set","push","length","onEnable","_handleSubscription","sort","a","b","systemEvent","emit","GameEvent","TOGGLE_SCREEN","onDisable","isOn","func","SHOW_SCREEN","onShowScreen","screenType","isOff","settings","disableScreenType"],"mappings":"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","sourceRoot":"/","sourcesContent":["import GameEvent from 'GameEvent';\nimport UiScreenType from 'UiScreenType';\n\n//#region classes-helpers\nconst ScreenShowSettings = cc.Class({\n    name: 'ScreenStartSettings',\n\n    properties: {\n        type: {\n            default: UiScreenType.None,\n            type: UiScreenType,\n            tooltip: 'тип экрана для создания на старте',\n        },\n        zIndex: {\n            default: 0,\n            tooltip: 'порядковый номер экрана для отрисовки. чем ниже номер, тем глубже он будет отрисован',\n        },\n        activateOnStart: {\n            default: false,\n            tooltip: 'активировать данный экран при старте?',\n        },\n        disableOnShow: {\n            default: [],\n            type: [UiScreenType],\n            tooltip: 'какие экраны скрыть при активации данного экрана (не используется при активации экрана на старте)',\n        },\n    },\n});\n//#endregion\n\ncc.Class({\n    extends: cc.Component,\n\n    properties: {\n        //#region editors fields and properties\n\n        screenSettings: {\n            default: [],\n            type: [ScreenShowSettings],\n            notify(oldValue) {\n                const array = [];\n                this.activateOnStart.forEach((el) => {\n                    if (el.type === UiScreenType.None || !array.find((set) => set.type === el.type)) {\n                        array.push(el);\n                    }\n                });\n\n                if (oldValue.length !== array.length) {\n                    this.activateOnStart = array;\n                }\n            },\n            tooltip: 'определяет какие экраны должны быть созданы и активированы на старте',\n        },\n        //#endregion\n\n        //#region public fields and properties\n        //#endregion\n\n        //#region private fields and properties\n        //#endregion\n    },\n\n    //#region life-cycle callbacks\n    onEnable() {\n        this._handleSubscription(true);\n        this.screenSettings\n            .sort((a, b) => a.zIndex - b.zIndex)\n            .forEach((el) => {\n                cc.systemEvent.emit(GameEvent.TOGGLE_SCREEN, el.type, el.activateOnStart);\n            });\n    },\n\n    onDisable() {\n        this._handleSubscription(false);\n    },\n    //#endregion\n\n    //#region public methods\n    //#endregion\n\n    //#region private methods\n    _handleSubscription(isOn) {\n        const func = isOn ? 'on' : 'off';\n\n        cc.systemEvent[func](GameEvent.SHOW_SCREEN, this.onShowScreen, this);\n    },\n    //#endregion\n\n    //#region event handlers\n    onShowScreen(screenType, isOff = true) {\n        const settings = this.screenSettings.find((set) => set.type === screenType);\n        if (!isOff) {\n            cc.systemEvent.emit(GameEvent.TOGGLE_SCREEN, screenType, false);\n            return;\n        }\n        if (settings) {\n            settings.disableOnShow.forEach((disableScreenType) => {\n                cc.systemEvent.emit(GameEvent.TOGGLE_SCREEN, disableScreenType, false);\n            });\n            cc.systemEvent.emit(GameEvent.TOGGLE_SCREEN, screenType, true);\n        }\n    },\n    //#endregion\n});\n"]}